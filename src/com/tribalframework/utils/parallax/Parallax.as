/*** ** Parallax Scrolling effects** com.tribalframework.utils.parallax.Parallax** @ver 1.0** @date 23-06-2010** @note "use the functions within an ** 		  ENTER_FRAME event in your Main document class"**************************************************************/package com.tribalframework.utils.parallax{	import flash.display.*;	import flash.events.*;		public class Parallax	{		static private var _distX;		static private var _distY;				static private var _factor1x:Number = 12;		static private var _factor1y:Number = 10;				static private var _degreeX:Number = 20;		static private var _degreeY:Number = 20;				public function Parallax(){					}				/* mc0 = affected display object.		** degX = degree of rotation in the X-axis. Default is 20.		** degY = degree of rotation in the Y-axis. Default is 20.		** fx = X-axis difference. factor affecting the X-axis. Default is 12.		** fy = Y-axis difference. factor affecting the Y-axis. Default is 12.		** Xmouse		** Ymouse		** stageW = bounding area width. left right limit		** stageH = bounding area height. top bottom limit		** example: Parallax.para3dInverse( mcName, stage.mouseX, stage.mouseY, stage.stageWidth, stage.stageHeight, 20, 20);		** 			Parallax.paraXNormal( mcName, stage.mouseX, stage.mouseY, 500, 400, 20);		***********************************************************************************************************************************/				/*		** para3dInverse		** mc will rotate/face opposite of mouse direction		******************************************************/		static public function para3dInverse(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, degX:Number=20, degY:Number=20){						mc0.rotationY = ((Xmouse - stageW/2)/180) * degX;			mc0.rotationX = ((- Ymouse + stageH/2)/180) * degY;					//	_distX - mc0.x		//	var mc1distX = (stageW/2) - ((Xmouse - stageW/2)/(stageW/2)) * _factor2x;		//	var mc1distY = (stageH/2) - ((Ymouse - stageH/2)/(stageH/2)) * _factor2y;					}				/*		** para3dNormal		** mc will rotate/face in the direction of mouse direction		*************************************************************/		static public function para3dNormal(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, degX:Number=20, degY:Number=20){						mc0.rotationY = ((- Xmouse + stageW/2)/180) * degX;			mc0.rotationX = ((Ymouse - stageH/2)/180) * degY;					}				/*		** paraInverse		** mc will move in X and Y axis opposite of mouse direction		*************************************************************/		static public function paraInverse(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, fx:Number=12, fy:Number=12){						_factor1x = fx;			_factor1y = fy;						_distX = (stageW/2) - ((Xmouse - stageW/2)/(stageW/2)) * _factor1x; 			_distY = (stageH/2) - ((Ymouse - stageH/2)/(stageH/2)) * _factor1y;						mc0.x += (_distX - mc0.x)/8;			mc0.y += (_distY - mc0.y)/8;					}		/*		** paraNormal		** mc will move in X and Y axis with mouse direction		*************************************************************/		static public function paraNormal(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, fx:Number=12, fy:Number=12){			_factor1x = fx;			_factor1y = fy;						_distX = (stageW/2) - ((stageW/2 - Xmouse)/(stageW/2)) * _factor1x; 			_distY = (stageH/2) - ((stageH/2 - Ymouse)/(stageH/2)) * _factor1y;						mc0.x += (_distX - mc0.x)/8;			mc0.y += (_distY - mc0.y)/8;		}						/*		** paraXNormal		** mc will move in X-axis with mouse direction		*************************************************************/		static public function paraXNormal(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, fx:Number=12){			_distX = (stageW/2) - ((stageW/2 - Xmouse)/(stageW/2)) * fx;			mc0.x += (_distX - mc0.x)/8;		}				/*		** paraYNormal		** mc will move in Y-axis with mouse direction		*************************************************************/		static public function paraYNormal(mc0:MovieClip, Xmouse:Number, Ymouse:Number, stageW:Number, stageH:Number, fy:Number=12){			_distY = (stageH/2) - ((stageH/2 - Ymouse)/(stageH/2)) * fy;			mc0.y += (_distY - mc0.y)/8;		}				static public function paraX(myMc:MovieClip, myX:Number, myW:Number, fx:Number=12){			var dist0X = myX - ((mouseX - myW)/myW) * fx;			myMc.x += (dist0X - myMc.x)/8;		}			}	}