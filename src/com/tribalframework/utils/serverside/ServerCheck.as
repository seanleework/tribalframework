package com.tribalframework.utils.serverside{	import flash.display.Sprite;	import flash.net.*;	import flash.events.*;		public class ServerCheck extends Sprite	{		private var _myUrl:String;		private var _myXml:String;				private var urlLoader:URLLoader;		private var variables:URLVariables;		private var varsend;				private var xmlLoader:URLLoader;		private var xmlReq;		private var xml:XML;		private var nodeTotal:Number;		private var nodeArray:Array;		private var valueArray:Array;				private var variables1:URLVariables;				public function ServerCheck(){					}				public function init(xmlurl:String, url:String){			_myUrl = url;			_myXml = xmlurl;						variables = new URLVariables();						xmlLoader = new URLLoader();			xmlReq = new URLRequest(_myXml);			xmlLoader.load(xmlReq);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);						urlLoader = new URLLoader();			varsend = new URLRequest(_myUrl);			urlLoader.load(varsend);			urlLoader.addEventListener(Event.COMPLETE, urlLoaded);						varsend.method = URLRequestMethod.GET;		}				private function xmlLoaded(e:Event){			xml = new XML(e.target.data);						nodeTotal = xml.image.length(); 						nodeArray = new Array();			valueArray = new Array();						for(var i = 0; i < nodeTotal; i++){				nodeArray.push(xml.image[i].@title);				valueArray.push(xml.image[i]);								variables[nodeArray[i]] = valueArray[i];			}					//	trace(nodeArray);		//	trace(valueArray);								//	variables.name = xml.image.name;		//	variables.email = xml.image.email;		//	trace(variables.name);		}				private function urlLoaded(e:Event){			e.target.removeEventListener(Event.COMPLETE, urlLoaded);						variables1 = new URLVariables( String(e.target.data.substr(1,e.target.data.length)) );												trace(variables1.status);			checkStatus();		}				public function checkStatus(){			var t = variables1.status;			dispatchEvent(new Event("OK"));		//	return t;		}				/*				fr.addEventListener(Event.CANCEL, cancelHandler);		fr.addEventListener(Event.COMPLETE, completeHandler);		fr.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);		fr.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);		fr.addEventListener(Event.OPEN, openHandler);		fr.addEventListener(ProgressEvent.PROGRESS, progressHandler);		fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);		fr.addEventListener(Event.SELECT, selectHandler);		fr.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);				/*		** all handlers				private function cancelHandler(event:Event):void {			trace("cancelHandler: " + event);		}				private function completeHandler(event:Event):void {			trace("completeHandler: " + event);		}				private function uploadCompleteDataHandler(event:DataEvent):void {			trace("uploadCompleteData: " + event);			trace('success');			_submit.mouseEnabled = false;			_reset.mouseEnabled = false;						regSuccess = true;		}				private function httpStatusHandler(event:HTTPStatusEvent):void {			trace("httpStatusHandler: " + event);		}				private function ioErrorHandler(event:IOErrorEvent):void {			trace("ioErrorHandler: " + event);		}				private function openHandler(event:Event):void {			trace("openHandler: " + event);		}				private function progressHandler(event:ProgressEvent):void {		//	var file:FileReference = FileReference(event.target);		//	trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);		}				private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorHandler: " + event);		}				private function selectHandler(event:Event):void {					}*/					}}