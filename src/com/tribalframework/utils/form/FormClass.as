package com.tribalframework.utils.form{	import flash.display.*;	import flash.text.TextField;	import flash.net.*;	import flash.events.*;		public class FormClass extends Sprite	{		// REGEXP --     /^[string types]{number of string}+[string types]{number of string}$/i		static private const regexp:RegExp = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,4}$/i;		static private const icexp:RegExp =  /^[a-zA-Z]{1}+[0-9]{7}+[a-zA-Z]{1}$/i;		static private const nameexp:RegExp =  /^[a-zA-Z]{1,20}$/i;				static private var _link:String;		static private var _submit:MovieClip;		static private var _reset:MovieClip;		static private var _varloader:URLLoader;		static private var _varsend:URLRequest;				static private var totalFields:Number = 0;				static private var _tf0:TextField;		static private var _tf1:TextField;		static private var _tf2:TextField;				static private var _tf0Value:String;		static private var _tf1Value:String;		static private var _tf2Value:String;				static private var _nameValidateStatus:Boolean = false;		static private var _icValidateStatus:Boolean = false;		static private var _emailValidateStatus:Boolean = false;				static private var validateCondition:Boolean;				static private var _id:String;		static private var fr:FileReference;				static public var regSuccess:Boolean;				static private var focusCount2:String;						public function FormClass(){					}				/*		** initMain		** link:String = url to ASP/backend script file, 		** submitmc:MovieClip = submit button MC,		** resetmc:MovieClip = reset button MC		**************************************************/		static public function initMain(link:String, submitmc:MovieClip, resetmc:MovieClip){						_link = link;			_submit = submitmc;			_reset = resetmc;						_varsend = new URLRequest(_link);			_varloader = new URLLoader();			_varsend.url = _link;			_varsend.method = URLRequestMethod.POST;						_varloader.addEventListener(Event.COMPLETE, loaded);		}						private static function resetBgColor(){		//	this['field'+focusCount2].backgroundColor = 0xFFFFFF;		}						static private function loaded(e:Event){			trace(_varloader);		}						/*		** init name textfield + validate string in it 		**************************************************/		static public function initName(tf0:TextField, d:String){			totalFields++;						_tf0 = tf0;			_tf0.text = d;			_tf0Value = _tf0.text;						// set name field validated status		//	_nameValidateStatus = validateName(_tf0Value);		}				/*		** init NRIC textfield + validate string in it		*****************************************************/		static public function initIc(tf1:TextField, d:String){			totalFields++;						_tf1 = tf1;			_tf1.text = d;			_tf1Value = _tf1.text;						// set NRIC field validated status		//	_icValidateStatus = validateIc(_tf1Value);		}				/*		** init email textfield + validate string in it		**************************************************/		static public function initEmail(tf2:TextField, d:String){			totalFields++;						_tf2 = tf2;			_tf2.text = d;			_tf2Value = _tf2.text;						// set email field validated status		//	_emailValidateStatus = validateEmail(_tf2Value);					//	_tf2.addEventListener(FocusEvent.FOCUS_IN, tf2FocusIn);			trace('end of initEmail');		}		static private function tf2FocusIn(e:FocusEvent){			trace('tf2focus');			trace(e.target.name); 		}				/*		** email validation		**********************/		static public function validateEmail(email:String):Boolean{			return regexp.test(email);		}				/*		** NRIC validation		**********************/		static public function validateIc(ic:String):Boolean{			return Boolean(ic.match(icexp));		}				/*		** Name validation		**********************/		static public function validateName(nama:String):Boolean{			return nameexp.test(nama);		}						/*		** Total validation		** validate all the fields		**********************************/		static public function totalValidation(){						trace('total fields '+totalFields);						trace('name validate status '+_nameValidateStatus);						var i:Number = 0;						_tf0Value = _tf0.text;			_tf1Value = _tf1.text;			_tf2Value = _tf2.text;						_nameValidateStatus = validateName(_tf0Value);			_icValidateStatus = validateIc(_tf1Value);			_emailValidateStatus = validateEmail(_tf2Value);						// check name validation			if(_nameValidateStatus == true){								trace(_nameValidateStatus);				i++;			}			else{							}						// check NRIC validation			if(_icValidateStatus == true){				trace(_icValidateStatus);				i++;			}			else{							}						// check email validation			if(_emailValidateStatus == true){				trace(_emailValidateStatus);				i++;			}			else{							}						trace('i '+i, 'totalfields '+totalFields);						// match number of validated fields with  			// total number of fields			if(i == totalFields){				validateCondition = true;			}			else{				validateCondition = false;			//	totalFields = 0;				i = 0;			}						trace('validateCondition '+validateCondition);			if(validateCondition == true){				_varloader.addEventListener(Event.COMPLETE, okok);					_varloader.load(_varsend);			}		}				static private function okok(e:Event=null){			trace('okok1');			var loader:URLLoader = URLLoader(e.target);			trace('okok2'+loader);			var res = loader.data;			trace('okok3'+res);			var vars:URLVariables = new URLVariables(res);			trace('okok4');			if(vars.error == 0){				trace('okok5');				_id = vars.id;				trace('hotaid = '+_id);								var vars2:URLVariables = new URLVariables();				vars2.id = _id;								vars2.task = "save_as_file";							_varsend.data = vars2; 								fr.upload(_varsend, "fileData");				fr.addEventListener(Event.CANCEL, cancelHandler);				fr.addEventListener(Event.COMPLETE, completeHandler);				fr.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);				fr.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);				fr.addEventListener(Event.OPEN, openHandler);				fr.addEventListener(ProgressEvent.PROGRESS, progressHandler);				fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);				fr.addEventListener(Event.SELECT, selectHandler);				fr.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);								}else{				trace('error');			}		}						/*		** all handlers		******************/		static private function cancelHandler(event:Event):void {			trace("cancelHandler: " + event);		}				static private function completeHandler(event:Event):void {			trace("completeHandler: " + event);		}				static private function uploadCompleteDataHandler(event:DataEvent):void {			trace("uploadCompleteData: " + event);			trace('success');			_submit.mouseEnabled = false;			_reset.mouseEnabled = false;						regSuccess = true;		}				static private function httpStatusHandler(event:HTTPStatusEvent):void {			trace("httpStatusHandler: " + event);		}				static private function ioErrorHandler(event:IOErrorEvent):void {			trace("ioErrorHandler: " + event);		}				static private function openHandler(event:Event):void {			trace("openHandler: " + event);		}				static private function progressHandler(event:ProgressEvent):void {			var file:FileReference = FileReference(event.target);			trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);		}				static private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorHandler: " + event);		}				static private function selectHandler(event:Event):void {					}										static public function resetName(tf0:TextField, d:String){						_tf0 = tf0;			_tf0.text = d;			_tf0Value = _tf0.text;		}		static public function resetIc(tf1:TextField, d:String){						_tf1 = tf1;			_tf1.text = d;			_tf1Value = _tf1.text;		}		static public function resetEmail(tf2:TextField, d:String){						_tf2 = tf2;			_tf2.text = d;			_tf2Value = _tf2.text;		}				/******************************/					}}