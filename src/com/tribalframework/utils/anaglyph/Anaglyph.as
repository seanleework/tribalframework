/*** ** Anaglyph / 3D stereography creator** com.tribalframework.utils.anaglyph.Anaglyph;** @ver 1.0** @date 05-07-2010***************************************/package com.tribalframework.utils.anaglyph{	import flash.geom.ColorTransform;	import flash.display.*;	import flash.events.*;		import org.papervision3d.scenes.Scene3D;	import org.papervision3d.objects.primitives.Cube;	import org.papervision3d.objects.primitives.Sphere;	import org.papervision3d.materials.ColorMaterial;	import org.papervision3d.materials.MovieMaterial;	import org.papervision3d.core.proto.MaterialObject3D;		import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.cameras.Camera3D;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.render.BasicRenderEngine;		public class Anaglyph	{		private var _stg:Object;				private var scene:Scene3D;		private var renderer1:BasicRenderEngine;		private var renderer2:BasicRenderEngine;		private var materialsList:MaterialsList;		private var movieMaterial:MovieMaterial;				private var cube:Cube;		private var sphere:Sphere;				private var cam1:Camera3D;		private var cam2:Camera3D;				private var ct1:ColorTransform;		private var ct2:ColorTransform;				private var vp1:Viewport3D;		private var vp2:Viewport3D;				public function Anaglyph(){					}				/*		** mc1 = material of cube		** stg = stage		** w & h = width and height of viewport		** primitive shape default = cube		** rotx & roty = rotationX and Y of the cube		** example: var temp = new Anaglyph();		**			temp.init( mcName, stage, 300, 300, "cube");		**					***********************************************************************/		public function init(mc1:MovieClip, stg:Object, w:Number, h:Number, shape:String="cube", rotx:Number=0, roty:Number=0){			_stg = stg;						scene = new Scene3D();			renderer1 = new BasicRenderEngine();			renderer2 = new BasicRenderEngine();						movieMaterial = new MovieMaterial(mc1);									if(shape == "cube"){				// add the material in the library to moviematerial				materialsList = new MaterialsList();				materialsList.addMaterial(movieMaterial, "front");				materialsList.addMaterial(movieMaterial, "back");				materialsList.addMaterial(movieMaterial, "left");				materialsList.addMaterial(movieMaterial, "right");				materialsList.addMaterial(movieMaterial, "top");				materialsList.addMaterial(movieMaterial, "bottom");								// attach materialslist to the cube/ wrap material around cube				cube = new Cube(materialsList);				cube.rotationX = rotx;				cube.rotationY = roty;				scene.addChild(cube);			}						// not sure about using sphere yet. KIV			if(shape == "sphere"){			//	var mat3d:MaterialObject3D = new MaterialObject3D();				sphere = new Sphere();				scene.addChild(sphere);			}									cam1 = new Camera3D();			cam2 = new Camera3D();						// cam2 shifted out of position (by 15px) relative to cam1 so that stereography of			// blue and red colors between the cubes of the different viewports can be seen			cam2.x = cam1.x + 55;			cam2.y = cam1.y + 15;			cam2.z = cam1.z + 15;						vp1 = new Viewport3D();			vp2 = new Viewport3D();						// ct1 blueMultiplier = 1			// ct2 redMultiplier = 1			ct1 = new ColorTransform(1,0,0);			ct2 = new ColorTransform(0,1,1);						// draw and fill up the viewports with white colour			// the multipliers of ct1 and ct2 react with white / #ffffff to			// take care of the stereographic effect			vp1.autoScaleToStage = true;			vp1.graphics.beginFill(0xffffff);			vp1.graphics.drawRect(0, 0, w, h);			vp1.transform.colorTransform = ct1;						vp2.autoScaleToStage = true;			vp2.graphics.beginFill(0xffffff);			vp2.graphics.drawRect(0, 0, w, h);			vp2.transform.colorTransform = ct2;						// vp2 blendMode = "add" OVER vp1			vp2.blendMode = "add";						_stg.addChild(vp1);			_stg.addChild(vp2);						renderer1.renderScene(scene, cam1, vp1);			renderer2.renderScene(scene, cam2, vp2);		}			}}